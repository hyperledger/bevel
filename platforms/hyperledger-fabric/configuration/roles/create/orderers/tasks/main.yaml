##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################

#############################################################################################
# This role creates value file for zkKafka and orderer
#############################################################################################

# Check if CA server is available
- name: "waiting for the CA server to be created in {{ org.name | lower }}-net"
  include_role:
    name: "{{ playbook_dir }}/../../shared/configuration/roles/check/helm_component"
  vars:
    component_type: "Pod"
    namespace: "{{ org.name | lower }}-net"
    component_name: "{{ component_services.ca.name }}"
    label_selectors:
      - app = {{ component_name }}
  when: add_peer is not defined or add_peer != 'true'

# Set Variable first_orderer
- name: "Set Variable first_orderer"
  set_fact:
    first_orderer: "{{ component_services.orderers | map(attribute='name') | first }}"

# Reset peers pods
- name: "Reset peers pods"
  include_role:
    name: create/refresh_certs/reset_pod
  vars:
    pod_name: "{{ orderer.name | lower }}"
    name: "{{ org.name | lower }}"
    file_path: "{{ values_dir }}/orderer/{{ orderer.name | lower }}-{{ org.name | lower }}.yaml"
    gitops_value: "{{ org.gitops }}"
    component_ns: "{{ namespace }}"
    kubernetes: "{{ org.k8s }}"
    hr_name: "{{ org.name | lower }}-{{ orderer.name }}"
  loop: "{{ component_services.orderers }}"
  loop_control:
    loop_var: orderer 
  when: refresh_cert is defined and refresh_cert == 'true'

# Create the value file for kafka for orderes as per requirements mentioned in network.yaml
- name: "create kafka clusters"
  include_role:
    name: helm_component
  vars:
    name: "orderer"
    org_name: "{{ org.name | lower }}"
    sc_name: "{{ org_name }}-bevel-storageclass"
    component_name: "zkkafka"
    type: "zkkafka"
    consensus: "{{component_services.consensus}}"
  when: component_services.consensus.name == 'kafka' and component_services.consensus is defined

# Create the value file for the Orderers as per requirements mentioned in network.yaml
- name: "create orderers"
  include_role:
    name: helm_component
  vars:
    name: "orderer"
    org_name: "{{ org.name | lower }}"
    component_name: "{{ orderer.name | lower  }}"
    type: "orderers"
    consensus: "{{component_services.consensus}}"
    component_subject: "{{ org.subject | quote }}"
    create_configmaps: "{{ true if first_orderer == orderer.name and (add_orderer is not defined or add_orderer == 'false') else false }}"
  loop: "{{ component_services.orderers }}"
  loop_control:
    loop_var: orderer
  when: 
    - component_services.orderers is defined and component_services.consensus is defined
    - orderer.status is not defined or orderer.status == 'new'

# Git Push: Push the above generated files to git directory 
- name: Git Push
  include_role: 
    name: "{{ playbook_dir }}/../../shared/configuration/roles/git_push"
  vars:
    GIT_DIR: "{{ playbook_dir }}/../../../"
    gitops: "{{ org.gitops }}"
    msg: "[ci skip] Pushing Orderer files"
  tags:
    - notest

# Wait for key certs exists in vault.
- name: Wait for CA key exists in vault
  include_role:
    name: "{{ playbook_dir }}/../../shared/configuration/roles/check/setup"
  vars:
    vault_field: "rootca_key"
    vault_path: "{{ vault.secret_path | default('secretsv2') }}/{{ network.env.type }}{{ org_name }}/ca"
    check: "crypto_materials"

# Wait for admin tls exists in vault.
- name: Wait for admin tls exists in vault.
  include_role:
    name: "{{ playbook_dir }}/../../shared/configuration/roles/check/setup"
  vars:
    vault_field: "client_key"
    vault_path: "{{ vault.secret_path | default('secretsv2') }}/{{ network.env.type }}{{ org_name }}/users/admin-tls"
    check: "crypto_materials"

# Wait for orderers tls exists in vault.
- name: Wait for orderers tls exists in vault.
  include_role:
    name: "{{ playbook_dir }}/../../shared/configuration/roles/check/setup"
  vars:
    vault_field: "server_key"
    vault_path: "{{ vault.secret_path | default('secretv2') }}/{{ network.env.type }}{{ org_name }}/orderers/{{ orderer.name }}-tls"
    check: "crypto_materials"
  loop: "{{ org.services.orderers }}"
  loop_control:
    loop_var: orderer
